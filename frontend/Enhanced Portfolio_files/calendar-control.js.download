/**
 * This script is called by CalendarControl.xsl. It attaches the 3rd party calendar javascript
 * to elements on the page that demand it. It will look for buttons with @calendar-for attribute set,
 * add a call to show calendar for onclick on those buttons, and bind the textfield with the @name
 * the same as the value of the @calendar-for.
 *
 * We allow for only a strict set of date formats to be interpreted. Editable date field accepts
 * months in number format only (e.g. only strings such as 06 or 11 are permitted, not Jun or October,
 * etc.). The format must be declared by the USER_DATE_FORMAT variable, which must be set anywhere on
 * the page before the execution of the script starts. Key characters for the format are 'd', 'm', and
 * 'y', which correspond to 2-digit day, 2-digit month, and 4-digit year respectively. Only a single
 * occurrence of each placeholder is allowed; i.e. formats like "dd-mm-yyyy" will not be properly handled.
 * Along with the format string the delimiter string must also be passed. Even though it is present in
 * the date format string, it still needs to be provided separately for the script that handles +/-/=
 * keypress events.
 *
 * Examples:
 * var USER_DATE_FORMAT = "d-m-y"; //30-08-2005
 * var USER_DATE_DELIMITER = "-";
 *
 * var USER_DATE_FORMAT = "y/m/d"; //2005/08/30
 * var USER_DATE_DELIMITER = "/";
 *
 * var USER_DATE_FORMAT = "m d y"; //08 30 2005
 * var USER_DATE_DELIMITER = " ";
 */
var ATTRIBUTE_CALENDAR = "calendar-for";
//var USER_DATE_FORMAT = "m/d/y";
//var USER_DATE_DELIMITER = "/";
var MESSAGE_MISSING_DATE_FORMAT = "User date format is not defined. The calendar cannot be used.";
var ATTRIBUTE_ALIGN = "calendar-align";
/**
 * The function returns a date string in currently defined date format, according
 * to USER_DATE_FORMAT variable. Note that it MUST be set anywhere on the page,
 * before the execution of the script starts. assignCalendars(...) function below
 * has a check for whether the field was defined to let the user know if there's a
 * problem.
 */
function parseUserDateFormat(year, month, day) {
	return USER_DATE_FORMAT.replace(/y/g, year).replace(/m/g, month).replace(/d/g, day);
}

function assignCalendars() {
	try {if(USER_DATE_FORMAT);} catch(e) {alert(MESSAGE_MISSING_DATE_FORMAT);return;}
    var allInputs = (typeof ALL_INPUT_ELEMENTS == 'undefined') ? document.getElementsByTagName("input"): ALL_INPUT_ELEMENTS; //all inputs on screen; defined in main.js
	var calendarButtons = new Array();
	var calFieldFormat = parseUserDateFormat("%Y", "%m", "%d");

	for(var i = 0; i < allInputs.length; ++i) {
		var currentButton = allInputs[i];
		if(currentButton.getAttribute(ATTRIBUTE_CALENDAR)) {
			calendarButtons.push(currentButton);
		}
	}
	for(var i = 0; i < calendarButtons.length; ++i) {
		var cButton = calendarButtons[i];
		var cField = document.getElementsByName(cButton.getAttribute(ATTRIBUTE_CALENDAR))[0];
		var cAlign = cButton.getAttribute(ATTRIBUTE_ALIGN);
		var ca = "bc";
		if(!cField) continue;
		if (cAlign)	ca = cAlign;

		cButton.id = "calendarButton" + i;
		if(!cField.id) cField.id = "dateField" + i;
		Calendar.setup(
			{
				button: cButton.id,
				inputField: cField.id,
				ifFormat: calFieldFormat,
				align: cAlign,
				cache: true
			}
		);

		/**
		 * Attach a function that will listen to shortcut date
		 * keys for this field. The keys are:
		 *
		 * '='					- insert current date
		 * '+' / '-'			- [on numpad] increment/decrement day
		 * 'SHIFT' + '+' / '-'	- increment/decrement year
		 */
		cField.onkeypress = function(nsEvent) {
			var this_event = !nsEvent ? window.event : nsEvent;
			var key_code = !nsEvent ? this_event.keyCode : this_event.which;
			var source = !nsEvent ? this_event.srcElement : this_event.target;
			var cDate = new Date();

			//restrict input to 11 digits
			if(source.value.length >= 11) {
				switch(key_code) {
					case 61:; //'='
					case 43:; //'+'
					case 45:break; //'-'
					case 0:; //home/end/delete
					case 8:; //backspace
					case 13:return true; //enter
					default:return false; //don't allow anything else
				}
			}

			if(key_code == 61) { //'='
				var day = cDate.getDate();
				day = day < 10 ? "0" + day : day;
				var month = cDate.getMonth() + 1;
				month = month < 10 ? "0" + month : month;

				source.value = parseUserDateFormat(cDate.getFullYear(), month, day);
                if (this_event.cancelBubble != 'undefined') {
                    this_event.cancelBubble = true;
                }    
                return false;
			}
			else if(key_code == 43 || key_code == 45) { //'+' or '-'
				var strippedFormat = USER_DATE_FORMAT.split(USER_DATE_DELIMITER).join(""); //for proper indexing
				var rawDate = source.value.split(USER_DATE_DELIMITER);

				var day = rawDate[strippedFormat.indexOf('d')]; //index in strippedFormat now corresponds to index in rawDate
				var month = rawDate[strippedFormat.indexOf('m')];

				if(!day || !month || !rawDate[strippedFormat.indexOf('y')]) {
					return true; //quit if date is not fully typed yet
				}

				day = day.charAt(0) == '0' ? day.substring(1) : day;
				month = month.charAt(0) == '0' ? month.substring(1) : month;
				cDate = new Date(rawDate[strippedFormat.indexOf('y')], parseInt(month)-1, day);

				if(isNaN(cDate.getTime())) //date invalid, so just return
					return false;

				if(this_event.shiftKey) { //incr/decr years when SHIFT is down
					if(key_code == 43) //'+'
						cDate.setFullYear(cDate.getFullYear()+1);
					else //'-'
						cDate.setFullYear(cDate.getFullYear()-1);
				}
				else { //incr/decr days when SHIFT is not pressed
					if(key_code == 43) //'+'
						cDate.setDate(cDate.getDate()+1);
					else //'-'
						cDate.setDate(cDate.getDate()-1);
				}
				day = cDate.getDate();
				day = day < 10 ? "0" + day : day;
				var month = cDate.getMonth() + 1;
				month = month < 10 ? "0" + month : month;

				source.value = parseUserDateFormat(cDate.getFullYear(), month, day);

				return false; //don't allow to type the character
			}
			else if(key_code >= 47 && key_code <= 57) { //allow digits
				return true;
			}
			else { //allow slashes and control chars
				switch(key_code) {
					case 92:; //slash
					case 0:; //home/end/delete
					case 8:; //backspace
					case 13:return true; //enter
					default:return false; //don't allow anything else
				}
			}
		};
		//when 8 digits entered only, format as proper date
		cField.onblur = function(nsEvent) {
			var this_event = !nsEvent ? window.event : nsEvent;
			var key_code = !nsEvent ? this_event.keyCode : this_event.which;
			var source = !nsEvent ? this_event.srcElement : this_event.target;

			var val = source.value;
			if(source.value.length == 8 && /[0-9]{8}/.test(source.value)) {
				source.value = val.substr(0, 2) + USER_DATE_DELIMITER + val.substr(2, 2) + USER_DATE_DELIMITER + val.substr(4);
			}
		};
	}
}