var ATTRIBUTE_CURRENCY_FIELD = "money-format";
var ATTRIBUTE_PERCENT_FIELD = "percent-format";
var ATTRIBUTE_FRACTIONAL_PERCENT_FIELD = "fract-percent-format";
var ATTRIBUTE_UNIT_FIELD = "unit-format";
var ATTRIBUTE_SIN_FIELD = "sin-format";
var ATTRIBUTE_NUMBER_FIELD = "number-format";
var ATTRIBUTE_INTEGER_NUMBER_FIELD = "integer-number-format";
var ATTRIBUTE_NUMERIC_CODE_FIELD = "numeric-code-format";

var DEFAULT_CURRENCY_DECIMALS = 2;
var DEFAULT_PERCENT_DECIMALS = 0;
var DEFAULT_FRACTIONAL_PERCENT_DECIMALS = 3;
var DEFAULT_UNIT_DECIMALS = 4;
var DEFAULT_NUMBER_DECIMALS = 0;
var DEFAULT_NUMERIC_CODE_DECIMALS = 0;
var DEFAULT_AGE = "";

/**
 * The function attaches number formatting listener event handlers to fields marked with
 * special attributes. Four numeric formats are currently supported: currency, percent, unit/share, and SIN number.
 * First 3 get similar treatment, differing only by the default number of decimal places, and
 * type of symbol used. The SIN is simply always a 9-digit number, in groups of 3 separated by a hyphen.
 *
 * The function must be called first to initialize text-field listeners. To mark a field to use one of
 * the formatters, its HTML tag should include a corresponding attribute, whose value contains some format options.
 * The options are ignored for SIN fields, so the attribute value can be left empty.
 *
 * For the 3 others it contains number precision (digits after decimal) and a flag to indicate whether or not to
 * show the corresponding symbol (money or currency). The first option is an optional integer, the second
 * is an optional character 's'. Note that the formatted number is rounded to the last allowed decimal position
 * if the number of digits typed in exceeds that allowed by the options. If this number is omitted alltogether,
 * the default number of digits is used instead.
 * E.g.
 * 		money-format="0s" - the number will be formatted as currency with the symbol included and with no fractional part
 *		percent-format="3" - percent; no symbol; 3 decimal places
 *		unit-format="" - units; default decimal digits (4)
 *		sin-format="" - sin; options non-applicable
 *		number-format="1" - number; 1 decimal place
 *
 * @param groupingChar	- character used to separate number positions of 3 orders of magnitude (10^3). E.g. It's the "," in "10,001.95"
 * @param decimalChar	- character used to separate integer from fractional part in a number. E.g. "." in "3.14159"
 * @param moneySymbol	- symbol to denote currency. E.g. "$"
 * @param percentSymbol	- percent symbol
 * @param moneyBefore	- Boolean. Indicates whether the money symbol should come before the number itself. If false, symbol is placed last.
 * @param percentBefore	- Boolean. Same as moneyBefore, but applies to percent symbol positioning.
 */
function attachFormatListenersToAll(groupingChar, decimalChar, moneySymbol, percentSymbol, moneyBefore, percentBefore) {
    var allInputs = (typeof ALL_INPUT_ELEMENTS == 'undefined') ? document.getElementsByTagName("input"): ALL_INPUT_ELEMENTS; //all inputs on screen; defined in main.js

	for(var i = 0; i < allInputs.length; ++i) {
		var currentField = allInputs[i];
        var currentFieldType=currentField.getAttribute('type') ;
        if(currentFieldType !=null && currentFieldType.toLowerCase() != "text") {
            continue;
        }
        var isMoney = false, isPercent = false, isFractPercent = false, isUnits = false, isSIN = false, isNumber = false;
		var isNumericCode = false, isIntegerNumber = false;
		try {if(currentField.getAttribute(ATTRIBUTE_CURRENCY_FIELD).length >= 0) isMoney = true}catch(e){};
		try {if(currentField.getAttribute(ATTRIBUTE_PERCENT_FIELD).length >= 0) isPercent = true}catch(e){};
		try {if(currentField.getAttribute(ATTRIBUTE_FRACTIONAL_PERCENT_FIELD).length >= 0) isFractPercent = true}catch(e){};
		try {if(currentField.getAttribute(ATTRIBUTE_UNIT_FIELD).length >= 0) isUnits = true}catch(e){};
		try {if(currentField.getAttribute(ATTRIBUTE_SIN_FIELD).length >= 0) isSIN = true}catch(e){};
		try {if(currentField.getAttribute(ATTRIBUTE_NUMBER_FIELD).length >= 0) isNumber = true}catch(e){};
		try {if(currentField.getAttribute(ATTRIBUTE_NUMERIC_CODE_FIELD).length >= 0) isNumericCode = true}catch(e){};
        try {if(currentField.getAttribute(ATTRIBUTE_INTEGER_NUMBER_FIELD).length >= 0)  isIntegerNumber = true}catch(e){};

        if(isMoney) {
			setFormatHandler(currentField, groupingChar, decimalChar, moneySymbol, moneyBefore, currentField.getAttribute(ATTRIBUTE_CURRENCY_FIELD), DEFAULT_CURRENCY_DECIMALS);
		}
		else if(isPercent) {
			setFormatHandler(currentField, groupingChar, decimalChar, percentSymbol, percentBefore, currentField.getAttribute(ATTRIBUTE_PERCENT_FIELD), DEFAULT_PERCENT_DECIMALS);
		}
		else if(isFractPercent) {
			setFormatHandler(currentField, groupingChar, decimalChar, percentSymbol, percentBefore, currentField.getAttribute(ATTRIBUTE_FRACTIONAL_PERCENT_FIELD), DEFAULT_FRACTIONAL_PERCENT_DECIMALS);
		}
		else if(isUnits) {
			setFormatHandler(currentField, groupingChar, decimalChar, "", true, currentField.getAttribute(ATTRIBUTE_UNIT_FIELD), DEFAULT_UNIT_DECIMALS);
		}
		else if(isNumber) {
			setFormatHandler(currentField, groupingChar, decimalChar, "", true, currentField.getAttribute(ATTRIBUTE_NUMBER_FIELD), DEFAULT_NUMBER_DECIMALS);
		}
        else if(isIntegerNumber) {
			//setFormatHandler(currentField, groupingChar, decimalChar, "", true, currentField.getAttribute(ATTRIBUTE_NUMBER_FIELD), DEFAULT_NUMBER_DECIMALS);
            setIntegerNumber(currentField);
        }
        else if(isSIN) {
			setSINNumberFormat(currentField); //defined below
		} else if(isNumericCode) {
			setFormatHandler(currentField, "", decimalChar, "", true, currentField.getAttribute(ATTRIBUTE_NUMERIC_CODE_FIELD), DEFAULT_NUMERIC_CODE_DECIMALS);
			var formatter = currentField.numberFormatter;
			if(formatter != null) {
				formatter.setSeparators(false, "", "");
			}
		}
	}
}

/**
 * Helper function to set onblur and onfocus events for number-formatted text fields.
 */
function setFormatHandler(fieldObj, groupingChar, decimalChar, symbol, symbolBefore, parseOptions, defaultDecimals) {
	if(!fieldObj.numberFormatter) { //attach number formatter object to this field
		fieldObj.numberFormatter = new NumberFormat(fieldObj.value.replace(/%/g, "").replace(/\$/g, "").replace(/\s+/g, ""), decimalChar);
    }
	var numberFormatter = fieldObj.numberFormatter;
	var decimalPlaces = parseInt(parseOptions);
	if(isNaN(decimalPlaces)) { //use default number of decimals if nothing in options
		decimalPlaces = defaultDecimals;
	}
	if(parseOptions.indexOf("s") != -1) { //if options declare the symbol to be shown, show it
		numberFormatter.setCurrency(true);
		numberFormatter.setCurrencyPosition((symbolBefore) ? numberFormatter.LEFT_OUTSIDE : numberFormatter.RIGHT_OUTSIDE);
		numberFormatter.setCurrencyValue(symbol);
	}
	numberFormatter.setPlaces(decimalPlaces);
	numberFormatter.setSeparators(true, groupingChar, decimalChar);
    
	fieldObj.onfocus = function() {
        try {
		    //don't parse if the minus sign is found anywhere but the start of the string
		    if(this.value.replace(/\$/, "").lastIndexOf('-') > 0) {
			    this.select();
			    return;
		    }
            var numberFormatter = this.numberFormatter;
            numberFormatter.setNumber(this.value.replace(/[.]{1}/, decimalChar), decimalChar); //make sure number is always parsed with '.' as decimal separator
		    this.value = numberFormatter.toUnformatted();
            this.select();
        } catch(e) {
            //Ignore exception.
        }
	};

	fieldObj.onblur = function() {
		//don't format if the minus sign is found anywhere but the start of the string
		if(this.value.lastIndexOf('-') > 0) {
			return;
		}
		var decimalPlaces = parseInt(parseOptions);
		if(isNaN(decimalPlaces)) { //use default number of decimals if nothing in options
			decimalPlaces = defaultDecimals;
		}
		var numberFormatter = this.numberFormatter;        
        numberFormatter.setNumber(this.value.replace(/[.]{1}/, decimalChar), decimalChar); //make sure number is always parsed with '.' as decimal separator
		this.value = numberFormatter.toFormatted();

	};

	fieldObj.onkeypress = function(nsEvent) {
		var this_event = !nsEvent ? window.event : nsEvent;
		var key_code = !nsEvent ? this_event.keyCode : this_event.which;
		var source = !nsEvent ? this_event.srcElement : this_event.target;

		var cChar = String.fromCharCode(key_code); //character typed

		/*if(key_code == 45) { //'-'
			return source.value.length == 0; //only allow minus when it's the first char
		}*/
		if(key_code >= 47 && key_code <= 57 || (cChar == decimalChar || cChar == groupingChar)) { //allow digits and grouping/decimal chars
			return true;
		}
		//allow control chars
		switch(key_code) {
			case 0:; //home/end/delete
			case 8:; //backspace
			case 45:; //'-'
			case 13:return true; //enter
			default:return false; //don't allow anything else
		}
	};
}
/**
 * Used to clean up the text inside the input box. Gets rid of %, $, and spaces.
 */
function cleanUpFormattingSymbols(fieldObj) {
	fieldObj.value = fieldObj.value.replace(/%/g, "").replace(/\$/g, "").replace(/\s+/g, "");
}
/**
 * Function sets a field to use SIN formatting.
 * @param fieldObj - input field to set format for
 */
function setSINNumberFormat(fieldObj) {
	cleanUpFormattingSymbols(fieldObj);
	fieldObj.numberFormatter = false;
	fieldObj.onblur = function() {
		if(this.value.match(/^[0-9]{9}$/)) {
			this.value = this.value.substr(0, 3) + "-" + this.value.substr(3, 3) + "-" + this.value.substr(6, 3);
		}
	}
	fieldObj.onkeypress = function(nsEvent) {
		var this_event = !nsEvent ? window.event : nsEvent;
		var key_code = !nsEvent ? this_event.keyCode : this_event.which;
		var source = !nsEvent ? this_event.srcElement : this_event.target;

		//restrict input to 11 digits
        /*
        if(source.value.length >= 11) {
			switch(key_code) {
				case 0:; //home/end/delete
				case 8:; //backspace
				case 13:return true; //enter
				default:return false; //don't allow anything else
			}
		}
		*/
		if(key_code >= 48 && key_code <= 57) { //allow digits
			return true;
		}
		//when pressing enter, format. EWMS-3542
		if(key_code == 13) {
			if(this.value.match(/^[0-9]{9}$/)) {
				this.value = this.value.substr(0, 3) + "-" + this.value.substr(3, 3) + "-" + this.value.substr(6, 3);
			}
			return true;
		}
		//allow control chars
		switch(key_code) {
			case 0:; //home/end/delete
			case 8:; //backspace
			case 45:; //'-'
			case 13:return true; //enter
			default:return false; //don't allow anything else
		}
	}
}
/**
 * Function sets a field to use currency formatting. Uses global formatting variables:
 * groupingCharFormat, decimalCharFormat, moneySymbolFormat, moneyBeforeFormat - those
 * have be defined somewhere on the page (see FieldFormatControl.xsl).
 * @param fieldObj		- input field as an object
 * @param parseOptions	- parse options; see comments for attachFormatListenersToAll
 */
function setMoneyNumberFormat(fieldObj, parseOptions) {
	cleanUpFormattingSymbols(fieldObj);
	fieldObj.numberFormatter = false; //clear cached formatter object
	setFormatHandler(fieldObj, groupingCharFormat, decimalCharFormat, moneySymbolFormat, moneyBeforeFormat, parseOptions, DEFAULT_CURRENCY_DECIMALS);
}
/**
 * Function sets a field to use percent formatting. Uses global formatting variables:
 * groupingCharFormat, decimalCharFormat, percentSymbolFormat, percentBeforeFormat - those
 * have be defined somewhere on the page (see FieldFormatControl.xsl).
 * @param fieldObj		- input field as an object
 * @param parseOptions	- parse options; see comments for attachFormatListenersToAll
 */
function setPercentNumberFormat(fieldObj, parseOptions) {
	cleanUpFormattingSymbols(fieldObj);
	fieldObj.numberFormatter = false; //clear cached formatter object
	setFormatHandler(fieldObj, groupingCharFormat, decimalCharFormat, percentSymbolFormat, percentBeforeFormat, parseOptions, DEFAULT_PERCENT_DECIMALS);
}
/**
 * Function sets a field to use unit formatting. Uses global formatting variables:
 * groupingCharFormat and decimalCharFormat - those
 * have be defined somewhere on the page (see FieldFormatControl.xsl).
 * @param fieldObj		- input field as an object
 * @param parseOptions	- parse options; see comments for attachFormatListenersToAll
 */
function setUnitNumberFormat(fieldObj, parseOptions) {
	cleanUpFormattingSymbols(fieldObj);
	fieldObj.numberFormatter = false; //clear cached formatter object
	setFormatHandler(fieldObj, groupingCharFormat, decimalCharFormat, "", true, parseOptions, DEFAULT_UNIT_DECIMALS);
}
function setIntegerNumber(fieldObj) {
    fieldObj.onkeypress = function (nsEvent) {
        var this_event = !nsEvent ? window.event : nsEvent;
        var key_code = !nsEvent ? this_event.keyCode : this_event.which;
        var source = !nsEvent ? this_event.srcElement : this_event.target;

        if(key_code >= 47 && key_code <= 57) { //allow digits only
            return true;
        }
        switch(key_code) {
            case 0:
                ; //home/end/delete
            case 8:
                ; //backspace
            case 45:
                ; //'-'
            case 13:
                return true; //enter
            default:
                return false; //don't allow anything else
        }
        return false;
    }
}